{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","data","setData","columns","React","useMemo","Header","accessor","Cell","row","valor","console","log","original","trafico","className","useTable","initialState","pageIndex","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","getTable","a","fetch","response","json","useEffect","length","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","onClick","disabled","type","defaultValue","onChange","e","target","value","Number","style","width","key","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4316d59b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {useEffect, Fragment, useState} from 'react';\nimport logo from './logo.svg';\nimport {\n  useTable,\n  useGroupBy,\n  useFilters,\n  useSortBy,\n  useExpanded,\n  usePagination,\n} from 'react-table'\nimport './App.css';\nimport io from 'socket.io-client';\n\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Radio base\",\n        accessor: \"radiobase\"\n      },\n      {\n        Header: \"Fecha\",\n        accessor: \"fecha\"\n      },\n      {\n        Header: \"RegiÃ³n\",\n        accessor: \"region\"\n      },\n      {\n        Header: \"Trafico\",\n        accessor: \"\",\n        Cell: row => {\n          let valor = \"\"\n          console.log(\"row.row.original\", row.row.original)\n          if (row.row.original.trafico <= 15) {\n            valor =\"text-danger\"\n          }\n          if (row.row.original.trafico > 15 && row.row.original.trafico <= 40) {\n            valor =\"text-warning\"\n          }\n          if (row.row.original.trafico > 40 && row.row.original.trafico <= 90) {\n            valor =\"text-warning\"\n          }\n          if (row.row.original.trafico > 90) {\n            valor =\"text-success\"\n          }\n          if (row.row.original.trafico === null) {\n            valor =\"text-secondary\"\n          }\n        return <div className={valor}>{row.row.original.trafico}</div>;\n        }\n      }\n    ],\n    []\n  );\n  \n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, \n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 2 },\n    },\n    usePagination\n  )\n\n\n  const getTable = async () => {\n    try {\n      \n    const response = await fetch(\"/api/data\");\n    console.log(response)\n    const data = await response.json()\n    setData(data.data);\n    console.log(data)\n     \n    } catch (error) {\n     console.log(\"error\", error);\n     \n    }\n\n  }\n\n  useEffect(()=>{\n    getTable()\n   \n  }, [])\n\n\n\n  let component = <div></div>;\n\n  // Render the UI for your table\n\n    component = (\n      <Fragment>\n        <div className=\"table-registros\">\n          {data.length > 0 ? (\n           <Fragment>\n             <table  className=\"table table-striped table-responsive\" {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map(\n            (row, i) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map(cell => {\n                    return (\n                      <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                    )\n                  })}\n                </tr>\n              )}\n          )}\n        </tbody>\n      </table>\n      {/* \n        Pagination can be built however you'd like. \n        This is just a very basic UI implementation:\n      */}\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n           </Fragment>\n          ) : (\n            <div className=\"alert alert-info\">\n              Falta que los registros se asignen a servidores\n            </div>\n          )}\n        </div>\n      </Fragment>\n    );\n\n    return component\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}