{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","data","columns","React","useMemo","Header","accessor","useTable","initialState","pageIndex","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","getTable","a","useEffect","className","length","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","onClick","disabled","type","defaultValue","onChange","e","target","value","Number","style","width","key","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,yLCmL5BC,MArKf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KAEPC,GAFO,KAEGC,IAAMC,SACpB,iBAAM,CACJ,CACEC,OAAQ,aACRC,SAAU,aAEZ,CACED,OAAQ,QACRC,SAAU,SAEZ,CACED,OAAQ,YACRC,SAAU,UAEZ,CACED,OAAQ,UACRC,SAAU,cAGd,KArBW,EAwCTC,YACF,CACEL,UACAD,OACAO,aAAc,CAAEC,UAAW,IAE7BC,KApBAC,EA1BW,EA0BXA,cACAC,EA3BW,EA2BXA,kBACAC,EA5BW,EA4BXA,aACAC,EA7BW,EA6BXA,WACAC,EA9BW,EA8BXA,KACAC,EA/BW,EA+BXA,gBACAC,EAhCW,EAgCXA,YACAC,EAjCW,EAiCXA,YACAC,EAlCW,EAkCXA,UACAC,EAnCW,EAmCXA,SACAC,EApCW,EAoCXA,SACAC,EArCW,EAqCXA,aACAC,EAtCW,EAsCXA,YAtCW,IAuCXC,MAASf,EAvCE,EAuCFA,UAAWgB,EAvCT,EAuCSA,SAWhBC,EAAQ,uCAAG,sBAAAC,EAAA,iGAAH,qDAgHZ,OApGFC,qBAAU,WACRF,MAEC,IAIa,8BAKZ,kBAAC,WAAD,KACE,yBAAKG,UAAU,mBACZ5B,EAAK6B,OAAS,EACd,kBAAC,WAAD,KACE,yCAAQD,UAAU,wCAA2ClB,KAClE,+BACGE,EAAakB,KAAI,SAAAC,GAAW,OAC3B,uBAAQA,EAAYC,sBACjBD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC7B,uBAAQA,EAAOC,iBAAmBD,EAAOE,OAAO,mBAKxD,0BAAWzB,IACRG,EAAKgB,KACJ,SAACO,EAAKC,GAEJ,OADAzB,EAAWwB,GAET,uBAAQA,EAAIE,cACTF,EAAIG,MAAMV,KAAI,SAAAW,GACb,OACE,uBAAQA,EAAKC,eAAiBD,EAAKL,OAAO,kBAY1D,yBAAKR,UAAU,cACb,4BAAQe,QAAS,kBAAMxB,EAAS,IAAIyB,UAAW7B,GAC5C,MACO,IACV,4BAAQ4B,QAAS,kBAAMtB,KAAgBuB,UAAW7B,GAC/C,KACO,IACV,4BAAQ4B,QAAS,kBAAMvB,KAAYwB,UAAW5B,GAC3C,KACO,IACV,4BAAQ2B,QAAS,kBAAMxB,EAASD,EAAY,IAAI0B,UAAW5B,GACxD,MACO,IACV,qCACO,IACL,gCACGR,EAAY,EADf,OACsBS,EAAYY,QACxB,KAEZ,8CACgB,IACd,2BACEgB,KAAK,SACLC,aAActC,EAAY,EAC1BuC,SAAU,SAAAC,GACR,IAAMlC,EAAOkC,EAAEC,OAAOC,MAAQC,OAAOH,EAAEC,OAAOC,OAAS,EAAI,EAC3D/B,EAASL,IAEXsC,MAAO,CAAEC,MAAO,YAEZ,IACR,4BACEH,MAAO1B,EACPuB,SAAU,SAAAC,GACR1B,EAAY6B,OAAOH,EAAEC,OAAOC,UAG7B,CAAC,GAAI,GAAI,GAAI,GAAI,IAAIpB,KAAI,SAAAN,GAAQ,OAChC,4BAAQ8B,IAAK9B,EAAU0B,MAAO1B,GAA9B,QACQA,SAOR,yBAAKI,UAAU,oBAAf,sDC5JQ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASxB,OAAO,kBAAC,EAAD,MAASyB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a2990843.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {useEffect, Fragment, useState} from 'react';\nimport logo from './logo.svg';\nimport {\n  useTable,\n  useGroupBy,\n  useFilters,\n  useSortBy,\n  useExpanded,\n  usePagination,\n} from 'react-table'\nimport './App.css';\nimport io from 'socket.io-client';\n\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Radio base\",\n        accessor: \"radiobase\"\n      },\n      {\n        Header: \"Fecha\",\n        accessor: \"fecha\"\n      },\n      {\n        Header: \"RegiÃ³n\",\n        accessor: \"region\"\n      },\n      {\n        Header: \"Trafico\",\n        accessor: \"trafico\"\n      }\n    ],\n    []\n  );\n  \n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, \n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 2 },\n    },\n    usePagination\n  )\n\n\n  const getTable = async () => {\n    try {\n      \n    \n     \n    } catch (error) {\n     console.log(\"error\", error);\n     \n    }\n\n  }\n\n  useEffect(()=>{\n    getTable()\n   \n  }, [])\n\n\n\n  let component = <div></div>;\n\n  // Render the UI for your table\n\n    component = (\n      <Fragment>\n        <div className=\"table-registros\">\n          {data.length > 0 ? (\n           <Fragment>\n             <table  className=\"table table-striped table-responsive\" {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map(\n            (row, i) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map(cell => {\n                    return (\n                      <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                    )\n                  })}\n                </tr>\n              )}\n          )}\n        </tbody>\n      </table>\n      {/* \n        Pagination can be built however you'd like. \n        This is just a very basic UI implementation:\n      */}\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n           </Fragment>\n          ) : (\n            <div className=\"alert alert-info\">\n              Falta que los registros se asignen a servidores\n            </div>\n          )}\n        </div>\n      </Fragment>\n    );\n\n    return component\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}